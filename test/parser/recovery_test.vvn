fn missingIs 6; end
assert(missingIs() == 6)

fn is "missing name"; end
fn of x is "missing name"; end
fn "missing name and is"; end

var wontBeDefined = ;
wontBeDefined

fn ifNoDo is
  if true ret true end
  ret false
end

assert(ifNoDo() == true);

fn forNoDo is
  for true ret true end
  ret false
end

assert(forNoDo() == true);

fn danglingValueEvaluates
  ret true false
end

assert(danglingValueEvaluates() == true)

fn danglingOpEvaluates of type is
  if type == "+"
    ret 1 +
  else if type == "-"
    ret 2 -
  else if type == "*"
    ret 3 *
  else if type == "/"
    ret 4 /
  else if type == "=="
    ret 5 ==
  else if type == "="
    ret 6 =
  else if type == "!="
    ret 7 !=
  else if type == "<="
    ret 8 <=
  else if type == ">="
    ret 9 >=
  else if type == "<"
    ret 10 <
  else if type == ">"
    ret 11 >
  end
end

assert(danglingOpEvaluates("+") == 1)
assert(danglingOpEvaluates("-") == 2)
assert(danglingOpEvaluates("*") == 3)
assert(danglingOpEvaluates("/") == 4)
assert(danglingOpEvaluates("==") == 5)
assert(danglingOpEvaluates("=") == 6)
assert(danglingOpEvaluates("!=") == 7)
assert(danglingOpEvaluates("<=") == 8)
assert(danglingOpEvaluates(">=") == 9)
assert(danglingOpEvaluates("<") == 10)
assert(danglingOpEvaluates(">") == 11)

assert(4 + + 4 == 8)
assert(4 + - 4 == 0)
assert(4 == 4;
assert((4 == 4;
assert(((4 == 4;
(assert(((4 == 4;
assert(4 == 4))
assert(4 == 4)))

["unbalanced")
("unbalanced"]

fn identity of x is x; end

assert(identity(3] == 3)
assert(identity(3] != 3)

assert(3 == len([1, 2, 3;
